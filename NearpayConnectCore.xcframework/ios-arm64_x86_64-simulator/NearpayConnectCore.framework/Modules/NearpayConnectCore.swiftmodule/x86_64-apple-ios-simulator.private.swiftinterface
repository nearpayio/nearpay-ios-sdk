// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios13-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NearpayConnectCore
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import CoreBluetooth
import Foundation
@_exported import NearpayConnectCore
import Network
import Swift
import SwiftUI
import _Concurrency
import _StringProcessing
public enum JobResult<Result, Failure> where Failure : Swift.Error {
  case result(Result)
  case failure(Failure)
}
public struct JobMessageResponse : Swift.Codable {
  public let status: Swift.Int
  public let message: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct TransactionJobReceiptResponse<T> : Swift.Codable where T : Swift.Decodable, T : Swift.Encodable {
  public let status: T
  public let transactionReceipts: [NearpayConnectCore.TransactionReceipt]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum ConnectivtyError : Swift.Error {
  case ConnectionFailedToRetry
  case RemoteDeviceIsBusy
  case UnautherizedReply
  case RemoteDeviceIsPaused
  case NoPairedDevice
  case NotSupportedConnectivity
  case NetworkError(Swift.String?)
}
public protocol SessoinJobDelegate {
  func sessionJob(didReceiveResultForPurchase result: NearpayConnectCore.JobResult<NearpayConnectCore.PurchaseResult, NearpayConnectCore.PurchaseError>, forJob jobId: Foundation.UUID)
  func sessionJob(didReceiveResultForRefund result: NearpayConnectCore.JobResult<NearpayConnectCore.RefundResult, NearpayConnectCore.RefundError>, forJob jobId: Foundation.UUID)
  func sessionJob(didReceiveResultForReversal result: NearpayConnectCore.JobResult<NearpayConnectCore.ReversalFinished, NearpayConnectCore.ReversalError>, forJob jobId: Foundation.UUID)
  func sessionJob(didReceiveResultForReconciliation result: NearpayConnectCore.JobResult<NearpayConnectCore.ReconciliationResult, NearpayConnectCore.ReconciliationError>, forJob jobId: Foundation.UUID)
}
public protocol ConnectivityConnectDelegate {
  func connectivityConnect(didConnectFor setting: NearpayConnectCore.ConnectivitySetting)
  func connectivityConnect(didCloseFor setting: NearpayConnectCore.ConnectivitySetting)
  func connectivityConnect(didThrowErrorFor setting: NearpayConnectCore.ConnectivitySetting, withError error: NearpayConnectCore.ConnectivtyError?)
  func connectivityConnect(didRetryToConnectFor setting: NearpayConnectCore.ConnectivitySetting)
  func connectivityConnect(didPause setting: NearpayConnectCore.ConnectivitySetting)
  func connectivityConnect(didResume setting: NearpayConnectCore.ConnectivitySetting)
}
@objc @_inheritsConvenienceInitializers @available(iOS 13.0, macOS 10.15, *)
open class Connectivity : ObjectiveC.NSObject, Foundation.ObservableObject {
  public static var shared: NearpayConnectCore.Connectivity
  @Combine.Published @_projectedValueProperty($setting) public var setting: NearpayConnectCore.ConnectivitySetting {
    get
    @available(iOS 13.0, macOS 10.15, *)
    set
    @available(iOS 13.0, macOS 10.15, *)
    _modify
  }
  public var $setting: Combine.Published<NearpayConnectCore.ConnectivitySetting>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var sessionDelegate: NearpayConnectCore.SessoinJobDelegate?
  public var connectDelegate: NearpayConnectCore.ConnectivityConnectDelegate?
  public var paired: NearpayConnectCore.ConnectivitySetting.PairedType {
    get
  }
  public var busy: Swift.Bool {
    get
  }
  @objc override dynamic public init()
  @discardableResult
  public func startPurchaseJob(amount: Swift.Int, enableReceiptUi: Swift.Bool = true, enableReversal: Swift.Bool = true, finishTimeOut: Swift.Int = 6, dismissible: Swift.Bool = false) -> Foundation.UUID
  public func startPurchaseJob(jobUUID: Foundation.UUID, amount: Swift.Int, enableReceiptUi: Swift.Bool = true, enableReversal: Swift.Bool = true, finishTimeOut: Swift.Int = 6, dismissible: Swift.Bool = false)
  @discardableResult
  public func startRefundJob(amount: Swift.Int, transactionUUID: Swift.String, adminPin: Swift.String?, enableEditableRefundAmountUi: Swift.Bool = false, enableReceiptUi: Swift.Bool = true, enableReversal: Swift.Bool = true, finishTimeOut: Swift.Int = 6, dismissible: Swift.Bool = false) -> Foundation.UUID
  @discardableResult
  public func startReversalJob(transactionUUID: Swift.String, enableReceiptUi: Swift.Bool = true, finishTimeOut: Swift.Int = 6, dismissible: Swift.Bool = false) -> Foundation.UUID
  @discardableResult
  public func startReconcileJob(adminPin: Swift.String?, enableReceiptUi: Swift.Bool = true, finishTimeOut: Swift.Int = 6, dismissible: Swift.Bool = false) -> Foundation.UUID
  public func recallActiveJob()
  public func cancelActiveJob()
  public func connectLastPairedDevice()
  public func connectLocal(host: Swift.String, port: Swift.Int, timeoutInSeconds: Swift.Int)
  public func forgetPaired()
  public func disconectLocal()
  public func version()
  public func testing()
  public static var fileURL: Foundation.URL? {
    get
  }
  public static func LoadSetting() -> NearpayConnectCore.ConnectivitySetting
  public func resetSetting()
  public static func saveSetting(setting: NearpayConnectCore.ConnectivitySetting)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension Foundation.Data {
  public func hexEncodedString() -> Swift.String
}
@available(iOS 13.0, macOS 10.15, *)
extension NearpayConnectCore.Connectivity : Foundation.URLSessionWebSocketDelegate {
  @objc dynamic public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc dynamic public func urlSession(_ session: Foundation.URLSession, webSocketTask: Foundation.URLSessionWebSocketTask, didOpenWithProtocol protocol: Swift.String?)
  @objc dynamic public func urlSession(_ session: Foundation.URLSession, webSocketTask: Foundation.URLSessionWebSocketTask, didCloseWith closeCode: Foundation.URLSessionWebSocketTask.CloseCode, reason: Foundation.Data?)
}
public enum RefundOutcomes : Swift.Int, Swift.Codable {
  case APPROVED
  case DECLIEND
  case REJECTED
  case AUTH_FAILED
  case INVALID
  case GENERAL_ERROR
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum RefundResult {
  case APPROVED([NearpayConnectCore.TransactionReceipt])
  case DECLIEND([NearpayConnectCore.TransactionReceipt])
}
public enum RefundError : Swift.Error {
  case REJECTED(Swift.String)
  case AUTH_FAILED(Swift.String)
  case INVALID(Swift.String)
  case GENERAL_ERROR(Swift.String?)
  public func message() -> Swift.String
}
public struct RefundPayload : Swift.Codable {
  public let transactionUUID: Swift.String
  public let customerReferenceNumber: Swift.String
  public let amount: Swift.Double
  public let enableEditableRefundAmountUi: Swift.Bool
  public let enableReceiptUi: Swift.Bool
  public let enableUiDismiss: Swift.Bool?
  public let enableReversal: Swift.Bool
  public let finishTimeOut: Swift.Int
  public let adminPin: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ReconciliationReceipt : Swift.Codable {
  public let id: Swift.String
  public let date: Swift.String?
  public let time: Swift.String?
  public let is_balanced: NearpayConnectCore.LabelField<Swift.Bool>?
  public let details: NearpayConnectCore.ReconciliationReceipt.ReconciliationDetails?
  public let schemes: [NearpayConnectCore.ReconciliationReceipt.ReconciliationSchemes]?
  public let currency: NearpayConnectCore.LocalizationField?
  public let qr_code: Swift.String
  public struct ReconciliationDetails : Swift.Codable {
    public let purchase: NearpayConnectCore.ReconciliationReceipt.ReconciliationLabelField?
    public let refund: NearpayConnectCore.ReconciliationReceipt.ReconciliationLabelField?
    public let purchase_reversal: NearpayConnectCore.ReconciliationReceipt.ReconciliationLabelField?
    public let refund_reversal: NearpayConnectCore.ReconciliationReceipt.ReconciliationLabelField?
    public let total: NearpayConnectCore.ReconciliationReceipt.ReconciliationLabelField?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct ReconciliationSchemes : Swift.Codable {
    public let name: NearpayConnectCore.LabelField<Swift.String>?
    public let pos: NearpayConnectCore.ReconciliationReceipt.ReconciliationSchemesDetails?
    public let host: NearpayConnectCore.ReconciliationReceipt.ReconciliationSchemesDetails?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct ReconciliationSchemesDetails : Swift.Codable {
    public let debit: NearpayConnectCore.ReconciliationReceipt.ReconciliationLabelField?
    public let credit: NearpayConnectCore.ReconciliationReceipt.ReconciliationLabelField?
    public let total: NearpayConnectCore.ReconciliationReceipt.ReconciliationLabelField?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct ReconciliationLabelField : Swift.Codable {
    public let label: NearpayConnectCore.LocalizationField?
    public let total: Swift.String?
    public let count: Swift.Int?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public let merchant: NearpayConnectCore.Merchant
  public let card_acceptor_terminal_id: Swift.String
  public let system_trace_audit_number: Swift.String
  public let pos_software_version_number: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct NameField<T> : Swift.Codable where T : Swift.Decodable, T : Swift.Encodable {
  public let name: NearpayConnectCore.LocalizationField?
  public let id: T?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum ReversalError : Swift.Error {
  case REJECTED(Swift.String)
  case AUTH_FAILED(Swift.String)
  case INVALID(Swift.String)
  case GENERAL_ERROR(Swift.String?)
  public func message() -> Swift.String
}
public enum ReversaldOutcomes : Swift.Int, Swift.Codable {
  case FINISHED
  case REJECTED
  case AUTH_FAILED
  case INVALID
  case GENERAL_ERROR
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct ReversalFinished {
  public let receipts: [NearpayConnectCore.TransactionReceipt]
}
public enum PurchaseOutcomes : Swift.Int, Swift.Codable {
  case APPROVED
  case DECLIEND
  case REJECTED
  case AUTH_FAILED
  case INVALID
  case GENERAL_ERROR
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum PurchaseResult {
  case APPROVED([NearpayConnectCore.TransactionReceipt])
  case DECLIEND([NearpayConnectCore.TransactionReceipt])
}
public enum PurchaseError : Swift.Error {
  case REJECTED(Swift.String)
  case AUTH_FAILED(Swift.String)
  case INVALID(Swift.String)
  case GENERAL_ERROR(Swift.String)
  public func message() -> Swift.String
}
public struct PurchasePayload : Swift.Codable {
  public let customerReferenceNumber: Swift.String
  public let amount: Swift.Double
  public let enableReceiptUi: Swift.Bool
  public let enableUiDismiss: Swift.Bool?
  public let enableReversal: Swift.Bool
  public let finishTimeOut: Swift.Int
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ConnectivitySetting : Swift.Codable {
  public var bluetooth: NearpayConnectCore.Connection
  public var tcp: NearpayConnectCore.Connection
  public var paired: NearpayConnectCore.ConnectivitySetting.PairedType
  public enum ConnectionType : Swift.String, Swift.Codable {
    case Bluetooth
    case Local
    case Net
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum PairedType : Swift.String, Swift.Codable {
    case none
    case Bluetooth
    case Local
    case Net
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public static let `default`: NearpayConnectCore.ConnectivitySetting
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct LocalizationField : Swift.Codable {
  public let arabic: Swift.String?
  public let english: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct BluetoothDevice : Swift.Identifiable {
  public let id: Swift.Int
  public let rssi: Swift.Int
  public let uuid: Foundation.UUID
  public let peripheral: CoreBluetooth.CBPeripheral
  public let name: Swift.String
  public let pairingMode: Swift.Bool
  public typealias ID = Swift.Int
}
public protocol BluetoothScanDelegate {
  func bluetoothScan(didStopFor serviceId: Swift.String)
  func bluetoothScan(didStartFor serviceId: Swift.String)
  func bluetoothScan(didFoundDeviceFor serviceId: Swift.String, device: NearpayConnectCore.BluetoothDevice)
  func bluetoothScan(didRefreshListFor serviceId: Swift.String, list: [NearpayConnectCore.BluetoothDevice])
}
public struct TransactionReceipt : Swift.Codable {
  public let receipt_id: Swift.String?
  public let transaction_uuid: Swift.String?
  public let merchant: NearpayConnectCore.Merchant?
  public let start_date: Swift.String?
  public let start_time: Swift.String?
  public let card_scheme_sponsor: Swift.String?
  public let tid: Swift.String?
  public let system_trace_audit_number: Swift.String?
  public let pos_software_version_number: Swift.String?
  public let retrieval_reference_number: Swift.String?
  public let card_scheme: NearpayConnectCore.NameField<Swift.String>?
  public let transaction_type: NearpayConnectCore.NameField<Swift.String>?
  public let pan: Swift.String?
  public let card_expiration: Swift.String?
  public let amount_authorized: NearpayConnectCore.LabelField<Swift.String>?
  public let amount_other: NearpayConnectCore.LabelField<Swift.String>?
  public let currency: NearpayConnectCore.LocalizationField?
  public let status_message: NearpayConnectCore.LocalizationField?
  public let is_approved: Swift.Bool?
  public let is_refunded: Swift.Bool?
  public let is_reversed: Swift.Bool?
  public let approval_code: NearpayConnectCore.LabelField<Swift.String>?
  public let verification_method: NearpayConnectCore.LocalizationField?
  public let end_date: Swift.String?
  public let end_time: Swift.String?
  public let receipt_line_one: NearpayConnectCore.LocalizationField?
  public let receipt_line_two: NearpayConnectCore.LocalizationField?
  public let thanks_message: NearpayConnectCore.LocalizationField?
  public let save_receipt_message: NearpayConnectCore.LocalizationField?
  public let entry_mode: Swift.String?
  public let action_code: Swift.String?
  public let application_identifier: Swift.String?
  public let terminal_verification_result: Swift.String?
  public let transaction_state_information: Swift.String?
  public let cardholader_verfication_result: Swift.String?
  public let cryptogram_information_data: Swift.String?
  public let application_cryptogram: Swift.String?
  public let kernel_id: Swift.String?
  public let payment_account_reference: Swift.String?
  public let pan_suffix: Swift.String?
  public let created_at: Swift.String?
  public let updated_at: Swift.String?
  public let qr_code: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Connection : Swift.Codable {
  public var name: Swift.String
  public var addressInfo: [NearpayConnectCore.Connection.AddressInfoKeysEnum : Swift.String]
  public var retries: Swift.Int
  public var timeoutInSecounds: Swift.Int
  public enum AddressInfoKeysEnum : Swift.CaseIterable, Swift.Codable {
    case host
    case port
    case uuid
    case extra_uuid
    case device_name
    case pathPrefix
    public static func == (a: NearpayConnectCore.Connection.AddressInfoKeysEnum, b: NearpayConnectCore.Connection.AddressInfoKeysEnum) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public typealias AllCases = [NearpayConnectCore.Connection.AddressInfoKeysEnum]
    public static var allCases: [NearpayConnectCore.Connection.AddressInfoKeysEnum] {
      get
    }
    public func encode(to encoder: Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: Swift.Decoder) throws
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct LabelField<T> : Swift.Codable where T : Swift.Decodable, T : Swift.Encodable {
  public let label: NearpayConnectCore.LocalizationField?
  public let value: T?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum ReconciliationResult {
  case BALANCED(NearpayConnectCore.ReconciliationReceipt)
  case NOT_BALANCED(NearpayConnectCore.ReconciliationReceipt)
}
public enum ReconciliationError : Swift.Error {
  case REJECTED(Swift.String)
  case AUTH_FAILED(Swift.String)
  case INVALID(Swift.String)
  case GENERAL_ERROR(Swift.String)
  public func message() -> Swift.String
}
public enum ReconcileOutcomes : Swift.Int, Swift.Codable {
  case BALANCED
  case NOT_BALANCED
  case REJECTED
  case AUTH_FAILED
  case INVALID
  case GENERAL_ERROR
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct ReconcilePayload : Swift.Codable {
  public let enableReceiptUi: Swift.Bool
  public let enableUiDismiss: Swift.Bool?
  public let finishTimeOut: Swift.Int
  public let adminPin: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ReconciliationReceiptPayload : Swift.Codable {
  public let status: NearpayConnectCore.ReconcileOutcomes
  public let reconcileReceipt: NearpayConnectCore.ReconciliationReceipt
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Merchant : Swift.Codable {
  public let id: Swift.String?
  public let name: NearpayConnectCore.LocalizationField?
  public let address: NearpayConnectCore.LocalizationField?
  public let category_code: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension NearpayConnectCore.RefundOutcomes : Swift.Equatable {}
extension NearpayConnectCore.RefundOutcomes : Swift.Hashable {}
extension NearpayConnectCore.RefundOutcomes : Swift.RawRepresentable {}
extension NearpayConnectCore.ReversaldOutcomes : Swift.Equatable {}
extension NearpayConnectCore.ReversaldOutcomes : Swift.Hashable {}
extension NearpayConnectCore.ReversaldOutcomes : Swift.RawRepresentable {}
extension NearpayConnectCore.PurchaseOutcomes : Swift.Equatable {}
extension NearpayConnectCore.PurchaseOutcomes : Swift.Hashable {}
extension NearpayConnectCore.PurchaseOutcomes : Swift.RawRepresentable {}
extension NearpayConnectCore.ConnectivitySetting.ConnectionType : Swift.Equatable {}
extension NearpayConnectCore.ConnectivitySetting.ConnectionType : Swift.Hashable {}
extension NearpayConnectCore.ConnectivitySetting.ConnectionType : Swift.RawRepresentable {}
extension NearpayConnectCore.ConnectivitySetting.PairedType : Swift.Equatable {}
extension NearpayConnectCore.ConnectivitySetting.PairedType : Swift.Hashable {}
extension NearpayConnectCore.ConnectivitySetting.PairedType : Swift.RawRepresentable {}
extension NearpayConnectCore.Connection.AddressInfoKeysEnum : Swift.Equatable {}
extension NearpayConnectCore.Connection.AddressInfoKeysEnum : Swift.Hashable {}
extension NearpayConnectCore.ReconcileOutcomes : Swift.Equatable {}
extension NearpayConnectCore.ReconcileOutcomes : Swift.Hashable {}
extension NearpayConnectCore.ReconcileOutcomes : Swift.RawRepresentable {}
